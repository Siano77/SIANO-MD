mkdir md-bot && cd md-bot
npm init -y
md-bot/
‚îÇ‚îÄ‚îÄ package.json
‚îÇ‚îÄ‚îÄ .gitignore
‚îÇ‚îÄ‚îÄ .env.example
‚îÇ‚îÄ‚îÄ README.md
‚îÇ‚îÄ‚îÄ Procfile                 # optional (Heroku-style)
‚îÇ‚îÄ‚îÄ Dockerfile               # optional (Docker/VPS)
‚îÇ
‚îî‚îÄ‚îÄ src/
    ‚îÇ‚îÄ‚îÄ index.js
    ‚îÇ‚îÄ‚îÄ handler.js
    ‚îÇ
    ‚îú‚îÄ‚îÄ utils/
    ‚îÇ   ‚îú‚îÄ‚îÄ config.js
    ‚îÇ   ‚îú‚îÄ‚îÄ store.js
    ‚îÇ   ‚îú‚îÄ‚îÄ spamGuard.js
    ‚îÇ   ‚îî‚îÄ‚îÄ moderation.js
    ‚îÇ
    ‚îî‚îÄ‚îÄ commands/
        ‚îú‚îÄ‚îÄ help.js
        ‚îú‚îÄ‚îÄ fun.js
        ‚îú‚îÄ‚îÄ media.js
        ‚îú‚îÄ‚îÄ admin.js
        ‚îú‚îÄ‚îÄ welcome.js
{
  "name": "Siano-MD",
  "version": "1.0.0",
  "description": "Wake Up To Reality üí•",
  "main": "src/index.js",
  "type": "commonjs",
  "license": "MIT",
  "scripts": {
    "start": "node src/index.js"
  },
  "dependencies": {
    "@whiskeysockets/baileys": "^6.7.7",
    "axios": "^1.7.4",
    "dotenv": "^16.4.5",
    "pino": "^9.3.2",
    "ytdl-core": "^4.11.5",
    "yt-search": "^2.10.6"
  }
}
node_modules
.env
session/
data/
PREFIX=#
OWNER_NUMBER=2347043387336
BOT_NAME=SIANO-MD
require('dotenv').config()
const pino = require('pino')
const { default: makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion, downloadMediaMessage } = require('@whiskeysockets/baileys')
const handleMessage = require('./handler')
const { getGroupSettings, ensureStore } = require('./utils/store')
const { handleAntiLinkOnMessage } = require('./utils/moderation')

const logger = pino({ level: 'info' })

async function start() {
  ensureStore()
  const { state, saveCreds } = await useMultiFileAuthState('session')
  const { version } = await fetchLatestBaileysVersion()

  const sock = makeWASocket({ version, logger, auth: state, printQRInTerminal: true })
  sock.ev.on('creds.update', saveCreds)

  // Main message pipeline
  sock.ev.on('messages.upsert', async ({ messages }) => {
    const m = messages[0]
    if (!m || !m.message) return

    // Anti‚Äëlink moderation for all texts
    try { await handleAntiLinkOnMessage(sock, m) } catch (e) { logger.warn({ e }, 'antilink check failed') }

    // Commands
    try { await handleMessage(sock, m) } catch (e) { logger.error({ e }, 'handler failed') }
  })

  // Welcome messages
  sock.ev.on('group-participants.update', async (update) => {
    try {
      const chat = update.id
      const settings = getGroupSettings(chat)
      if (!settings.welcome || update.action !== 'add') return
      const user = update.participants[0]
      const text = (settings.welcomeText || 'Welcome to the group, @user üéâ').replace(/@user/g, `@${user.split('@')[0]}`)
      await sock.sendMessage(chat, { text, mentions: [user] })
    } catch (e) { logger.warn({ e }, 'welcome failed') }
  })
}

start()
const { # } = require('./utils/config')
const { isSpamming } = require('./utils/spamGuard')
const fun = require('./commands/fun')
const media = require('./commands/media')
const admin = require('./commands/admin')
const welcome = require('./commands/welcome')
const help = require('./commands/help')

const all = { ...fun, ...media, ...admin, ...welcome, ...help }

function bodyOf(msg) {
  const m = msg.message
  return (
    m?.conversation ||
    m?.extendedTextMessage?.text ||
    m?.imageMessage?.caption ||
    m?.videoMessage?.caption ||
    ''
  )
}

async function handleMessage(sock, msg) {
  const jid = msg.key.remoteJid
  const sender = msg.key.participant || jid
  const body = bodyOf(msg)
  if (!body || !body.startsWith(prefix())) return

  // Anti‚Äëspam: simple cooldown per user
  if (isSpamming(sender)) {
    return sock.sendMessage(jid, { text: '‚ö†Ô∏è Slow down, you\'re sending commands too quickly.' }, { quoted: msg })
  }

  const args = body.slice(prefix().length).trim().split(/\s+/)
  const cmd = args.shift().toLowerCase()

  const handler = all[cmd]
  if (!handler) {
    return sock.sendMessage(jid, { text: `‚ùì Unknown command. Type ${prefix()}help` }, { quoted: msg })
  }

  const res = await handler({ sock, msg, args })
  if (!res) return
  if (typeof res === 'string') return sock.sendMessage(jid, { text: res }, { quoted: msg })
  return sock.sendMessage(jid, res, { quoted: msg })
}

module.exports = handleMessage
function prefix() { return process.env.PREFIX || '#' }
function owner()  { return process.env.OWNER_NUMBER || '' }
function botName(){ return process.env.BOT_NAME || 'SIANO-MD' }
module.exports = { prefix, owner, botName }
// 2.5s cooldown per user
const last = new Map()
function isSpamming(user) { const now = Date.now(); const t = last.get(user) || 0; if (now - t < 2500) return true; last.set(user, now); return false }
module.exports = { isSpamming }
const { getGroupSettings } = require('./store')
const WA_LINK = /chat\.whatsapp\.com\/[A-Za-z0-9]+/i

async function isAdmin(sock, jid, userJid) {
  const meta = await sock.groupMetadata(jid)
  const p = meta.participants.find(p => p.id === userJid)
  return !!p?.admin
}
async function isBotAdmin(sock, jid) {
  const meta = await sock.groupMetadata(jid)
  const me = (await sock.user.id)
  const bot = meta.participants.find(p => p.id === me)
  return !!bot?.admin
}

async function handleAntiLinkOnMessage(sock, m) {
  const jid = m.key.remoteJid
  if (!jid.endsWith('@g.us')) return // groups only

  const body = m.message?.conversation || m.message?.extendedTextMessage?.text || ''
  if (!body) return

  const settings = getGroupSettings(jid)
  if (!settings.antilink) return
  if (!WA_LINK.test(body)) return

  const sender = m.key.participant
  const admin = await isAdmin(sock, jid, sender)
  if (admin) return // ignore admins

  const botAdmin = await isBotAdmin(sock, jid)
  if (botAdmin) {
    try {
      await sock.sendMessage(jid, { text: `üîó Anti‚Äëlink: @${sender.split('@')[0]} ‚Äî removing‚Ä¶`, mentions: [sender] })
      await sock.groupParticipantsUpdate(jid, [sender], 'remove')
    } catch (e) {
      await sock.sendMessage(jid, { text: `‚ö†Ô∏è Anti‚Äëlink triggered for @${sender.split('@')[0]} but I lack permissions.`, mentions: [sender] })
    }
  } else {
    await sock.sendMessage(jid, { text: `‚ö†Ô∏è Anti‚Äëlink triggered by @${sender.split('@')[0]} ‚Äî make me *admin* to enforce.`, mentions: [sender] })
  }
}

module.exports = { handleAntiLinkOnMessage }
